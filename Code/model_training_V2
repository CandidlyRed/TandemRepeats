{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"yb_7IMYEv9Au","executionInfo":{"status":"ok","timestamp":1713040750634,"user_tz":300,"elapsed":2144,"user":{"displayName":"Stephen Dorn","userId":"16442747335412641970"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.linear_model import ElasticNet\n","from sklearn.metrics import roc_auc_score\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","import xgboost as xgb\n","\n","from sklearn.neighbors import KNeighborsClassifier"]},{"cell_type":"code","source":["data = 'TRs_annotated_cleaned.csv'\n","df = pd.read_csv(data)"],"metadata":{"id":"xf1iiV77wEpc","executionInfo":{"status":"error","timestamp":1713040754541,"user_tz":300,"elapsed":1155,"user":{"displayName":"Stephen Dorn","userId":"16442747335412641970"}},"outputId":"c17a3ad1-2d62-42f1-f766-3454ea2de5f2","colab":{"base_uri":"https://localhost:8080/","height":311}},"execution_count":2,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'TRs_annotated_cleaned.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-85a4e2cec64c>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'TRs_annotated_cleaned.csv'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m    910\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 912\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    575\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    576\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 577\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    578\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    579\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1405\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1406\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1407\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1409\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1659\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1660\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1661\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1662\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1663\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    857\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 859\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    860\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    861\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'TRs_annotated_cleaned.csv'"]}]},{"cell_type":"code","source":["col_names = df.columns"],"metadata":{"id":"IslymKtCw3HV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["col_names = df.columns\n","categorical = [var for var in df.columns if df[var].dtype=='O']\n","numerical = [var for var in df.columns if df[var].dtype!='O']"],"metadata":{"id":"C7OdFs9KxPgp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(numerical)\n","print(categorical)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_2NR1F8txlm8","executionInfo":{"status":"ok","timestamp":1713038189513,"user_tz":300,"elapsed":129,"user":{"displayName":"Tim Gruenloh","userId":"14090738425308861435"}},"outputId":"c31b16f6-4a6f-457a-e1d1-fc1ecff924df"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['gene_distance', 'gerp', 'TAD', 'eSTR', 'opReg', 'promoter', 'UTR_3', 'UTR_5', 'loeuf', 'pLi', 'RAD21', 'SMC3', 'per_g', 'per_c', 'per_a', 'per_t', 'gc_content', 'eSh0', 'eSh1', 'eSh2', 'eSh3', 'eSh4', 'eSh5', 'eTr0', 'eTr2', 'eTr3', 'eTr4', 'eTr5', 'eH', 'eW', 'eS6', 'eS', 'J', 'eX0', 'eX1R', 'eX2', 'eX3', 'eX4', 'eX5', 'tissue_simple_No_expression', 'tissue_simple_Nervous_System', 'tissue_simple_Other', 'region_intergenic', 'region_intron', 'region_exon', 'location_First', 'location_Middle', 'location_Last', 'label']\n","['id', 'location', 'region', 'gene_type', 'tissue_simple']\n"]}]},{"cell_type":"code","source":["# changing categorial variables into one-hot\n","# ['id', 'location', 'region', 'gene_type', 'tissue_simple']\n","df.drop(['id', 'location', 'region', 'tissue_simple'], axis=1, inplace=True)\n","\n","one_hot_gene_type = pd.get_dummies(df.gene_type, prefix=\"gene_type\", drop_first=True, dtype=int)\n","new_df = pd.concat([df[numerical], one_hot_gene_type], axis=1)\n","new_df.drop(['gene_type_intergenic'], axis=1, inplace=True)"],"metadata":{"id":"UXCTDLMwyc4Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"jCcURfh4B11Y","executionInfo":{"status":"ok","timestamp":1713038193623,"user_tz":300,"elapsed":101,"user":{"displayName":"Tim Gruenloh","userId":"14090738425308861435"}},"outputId":"11dde331-7d5c-43a5-f1dd-b0ad75b29e60"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gene_distance   gerp  TAD  eSTR  opReg  promoter  UTR_3  UTR_5  loeuf  pLi  \\\n","0           6407  2.790    0     0      0         0      0      0   9.00  0.0   \n","1              0 -0.015    0     0      1         0      0      0   0.70  0.0   \n","2              0  0.117    0     0      1         0      0      0   0.70  0.0   \n","3              0  0.113    0     0      1         0      0      0   0.85  0.0   \n","4              0  2.770    0     0      0         0      0      0   0.85  0.0   \n","\n","   ...  location_Last  label  gene_type_Unknown  gene_type_antisense  \\\n","0  ...              0      0                  0                    0   \n","1  ...              0      0                  0                    0   \n","2  ...              0      1                  0                    0   \n","3  ...              0      0                  0                    0   \n","4  ...              0      0                  0                    0   \n","\n","   gene_type_lincRNA  gene_type_polymorphic_pseudogene  \\\n","0                  0                                 0   \n","1                  0                                 0   \n","2                  0                                 0   \n","3                  0                                 0   \n","4                  0                                 0   \n","\n","   gene_type_processed_transcript  gene_type_protein_coding  \\\n","0                               0                         0   \n","1                               0                         1   \n","2                               0                         1   \n","3                               0                         1   \n","4                               0                         1   \n","\n","   gene_type_pseudogene  gene_type_sense_overlapping  \n","0                     0                            0  \n","1                     0                            0  \n","2                     0                            0  \n","3                     0                            0  \n","4                     0                            0  \n","\n","[5 rows x 57 columns]"],"text/html":["\n","  <div id=\"df-64c92c1f-de22-44ed-a276-e16d42852061\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gene_distance</th>\n","      <th>gerp</th>\n","      <th>TAD</th>\n","      <th>eSTR</th>\n","      <th>opReg</th>\n","      <th>promoter</th>\n","      <th>UTR_3</th>\n","      <th>UTR_5</th>\n","      <th>loeuf</th>\n","      <th>pLi</th>\n","      <th>...</th>\n","      <th>location_Last</th>\n","      <th>label</th>\n","      <th>gene_type_Unknown</th>\n","      <th>gene_type_antisense</th>\n","      <th>gene_type_lincRNA</th>\n","      <th>gene_type_polymorphic_pseudogene</th>\n","      <th>gene_type_processed_transcript</th>\n","      <th>gene_type_protein_coding</th>\n","      <th>gene_type_pseudogene</th>\n","      <th>gene_type_sense_overlapping</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6407</td>\n","      <td>2.790</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9.00</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>-0.015</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.70</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0.117</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.70</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0.113</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.85</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>2.770</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.85</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 57 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64c92c1f-de22-44ed-a276-e16d42852061')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-64c92c1f-de22-44ed-a276-e16d42852061 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-64c92c1f-de22-44ed-a276-e16d42852061');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f16ad6c3-e8a6-4ae2-aaca-18b977a60d54\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f16ad6c3-e8a6-4ae2-aaca-18b977a60d54')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f16ad6c3-e8a6-4ae2-aaca-18b977a60d54 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"new_df"}},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["X = new_df.drop(['label'], axis=1)\n","y = df['label']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 32)"],"metadata":{"id":"XJWsj_nTzIYW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# List of column names\n","all_columns = X.columns\n","\n","# List to store column names where all values are 0 or 1\n","binary_columns = []\n","\n","# Iterate over each column\n","for column in all_columns:\n","    unique_values = X[column].unique()\n","    # Check if unique values contain only 0 and 1\n","    if set(unique_values) == {0, 1}:\n","        binary_columns.append(column)\n","\n","# Print column names where all values are 0 or 1\n","# print(\"Columns with only 0 or 1 values:\")\n","for column in binary_columns:\n","    # print(column)\n","    pass"],"metadata":{"id":"ceHxKBrZ_hfT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["numeric_columns = [elem for elem in all_columns if elem not in binary_columns]"],"metadata":{"id":"TTQqhB70AMah"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a ColumnTransformer to apply different transformations to numeric and binary columns\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('numeric', StandardScaler(), numeric_columns),\n","        ('binary', 'passthrough', binary_columns)\n","    ])\n","\n","# Define the pipeline with the preprocessing steps\n","pipeline = Pipeline(steps=[('preprocessor', preprocessor)])\n","\n","# Fit and transform the training data\n","X_train_processed = pipeline.fit_transform(X_train)\n","\n","# Transform the test data using the fitted pipeline\n","X_test_processed = pipeline.transform(X_test)\n","\n","# Convert the processed data back to DataFrame (optional)\n","X_train_processed = pd.DataFrame(X_train_processed, columns=numeric_columns + binary_columns)\n","X_test_processed = pd.DataFrame(X_test_processed, columns=numeric_columns + binary_columns)"],"metadata":{"id":"vId3_ZdTAkW6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train_processed.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"OVSxBsJYBdSt","executionInfo":{"status":"ok","timestamp":1713038238911,"user_tz":300,"elapsed":242,"user":{"displayName":"Tim Gruenloh","userId":"14090738425308861435"}},"outputId":"bfb89442-2887-4fcc-b3d7-df5d7be60c81"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gene_distance      gerp     loeuf       pLi     RAD21      SMC3     per_g  \\\n","0      -0.423659  0.009804 -1.146006 -0.426908 -0.125087 -0.128276  0.417507   \n","1       0.805738 -0.263643  0.794504 -0.426908 -0.125087 -0.128276 -0.761202   \n","2      -0.423659 -0.412051 -1.160744 -0.426908 -0.125087 -0.128276 -0.761202   \n","3      -0.423659  0.228327 -1.347425  2.597147 -0.125087 -0.128276 -0.761202   \n","4      -0.106366  0.143021  0.794504 -0.426908 -0.125087 -0.128276  1.596216   \n","\n","      per_c     per_a     per_t  ...  location_Middle  location_Last  \\\n","0 -1.182041  1.912984 -0.740486  ...              0.0            1.0   \n","1  0.778989 -0.632831  0.490393  ...              0.0            0.0   \n","2  0.778989  0.385618 -0.740486  ...              1.0            0.0   \n","3 -1.182041  0.385618  2.951413  ...              1.0            0.0   \n","4 -1.182041  0.385618 -0.740486  ...              0.0            0.0   \n","\n","   gene_type_Unknown  gene_type_antisense  gene_type_lincRNA  \\\n","0                0.0                  0.0                0.0   \n","1                0.0                  0.0                0.0   \n","2                0.0                  0.0                0.0   \n","3                0.0                  0.0                0.0   \n","4                0.0                  0.0                0.0   \n","\n","   gene_type_polymorphic_pseudogene  gene_type_processed_transcript  \\\n","0                               0.0                             0.0   \n","1                               0.0                             0.0   \n","2                               0.0                             0.0   \n","3                               0.0                             0.0   \n","4                               0.0                             0.0   \n","\n","   gene_type_protein_coding  gene_type_pseudogene  gene_type_sense_overlapping  \n","0                       1.0                   0.0                          0.0  \n","1                       0.0                   0.0                          0.0  \n","2                       1.0                   0.0                          0.0  \n","3                       1.0                   0.0                          0.0  \n","4                       0.0                   0.0                          0.0  \n","\n","[5 rows x 56 columns]"],"text/html":["\n","  <div id=\"df-6b272196-c7a2-4553-94e9-4482c5a1c82d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gene_distance</th>\n","      <th>gerp</th>\n","      <th>loeuf</th>\n","      <th>pLi</th>\n","      <th>RAD21</th>\n","      <th>SMC3</th>\n","      <th>per_g</th>\n","      <th>per_c</th>\n","      <th>per_a</th>\n","      <th>per_t</th>\n","      <th>...</th>\n","      <th>location_Middle</th>\n","      <th>location_Last</th>\n","      <th>gene_type_Unknown</th>\n","      <th>gene_type_antisense</th>\n","      <th>gene_type_lincRNA</th>\n","      <th>gene_type_polymorphic_pseudogene</th>\n","      <th>gene_type_processed_transcript</th>\n","      <th>gene_type_protein_coding</th>\n","      <th>gene_type_pseudogene</th>\n","      <th>gene_type_sense_overlapping</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.423659</td>\n","      <td>0.009804</td>\n","      <td>-1.146006</td>\n","      <td>-0.426908</td>\n","      <td>-0.125087</td>\n","      <td>-0.128276</td>\n","      <td>0.417507</td>\n","      <td>-1.182041</td>\n","      <td>1.912984</td>\n","      <td>-0.740486</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.805738</td>\n","      <td>-0.263643</td>\n","      <td>0.794504</td>\n","      <td>-0.426908</td>\n","      <td>-0.125087</td>\n","      <td>-0.128276</td>\n","      <td>-0.761202</td>\n","      <td>0.778989</td>\n","      <td>-0.632831</td>\n","      <td>0.490393</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.423659</td>\n","      <td>-0.412051</td>\n","      <td>-1.160744</td>\n","      <td>-0.426908</td>\n","      <td>-0.125087</td>\n","      <td>-0.128276</td>\n","      <td>-0.761202</td>\n","      <td>0.778989</td>\n","      <td>0.385618</td>\n","      <td>-0.740486</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.423659</td>\n","      <td>0.228327</td>\n","      <td>-1.347425</td>\n","      <td>2.597147</td>\n","      <td>-0.125087</td>\n","      <td>-0.128276</td>\n","      <td>-0.761202</td>\n","      <td>-1.182041</td>\n","      <td>0.385618</td>\n","      <td>2.951413</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.106366</td>\n","      <td>0.143021</td>\n","      <td>0.794504</td>\n","      <td>-0.426908</td>\n","      <td>-0.125087</td>\n","      <td>-0.128276</td>\n","      <td>1.596216</td>\n","      <td>-1.182041</td>\n","      <td>0.385618</td>\n","      <td>-0.740486</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 56 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b272196-c7a2-4553-94e9-4482c5a1c82d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6b272196-c7a2-4553-94e9-4482c5a1c82d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6b272196-c7a2-4553-94e9-4482c5a1c82d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f48a7097-c9bb-44c4-a732-428db8b8426b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f48a7097-c9bb-44c4-a732-428db8b8426b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f48a7097-c9bb-44c4-a732-428db8b8426b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train_processed"}},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["param_grid = {\n","    'alpha': [0, 0.2, 0.4, 0.6, 0.8, 1.0],\n","    'l1_ratio': [0, 0.2, 0.4, 0.6, 0.8, 1.0]\n","}\n","elastic_net = ElasticNet(random_state=42)\n","\n","grid_search = GridSearchCV(estimator=elastic_net, param_grid=param_grid, cv=5, scoring='roc_auc')\n","grid_search.fit(X_train_processed, y_train)\n","best_model_EN = grid_search.best_estimator_"],"metadata":{"id":"yp6kh16-zLUM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print params\n","best_params = grid_search.best_params_\n","print(\"Best Parameters:\", best_params)\n","\n","y_pred_prob = best_model_EN.predict(X_test_processed)\n","\n","# Compute the ROC AUC score\n","roc_auc = roc_auc_score(y_test, y_pred_prob)\n","print(\"ROC AUC Score:\", roc_auc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UFZQ7ahLzVPv","executionInfo":{"status":"ok","timestamp":1713038540801,"user_tz":300,"elapsed":116,"user":{"displayName":"Tim Gruenloh","userId":"14090738425308861435"}},"outputId":"564a8e3a-3426-4fba-a2c7-34d59d608434"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Parameters: {'alpha': 0, 'l1_ratio': 0}\n","ROC AUC Score: 0.7817782537984036\n"]}]},{"cell_type":"code","source":["y_pred_prob = best_model_EN.predict(X_train_processed)\n","\n","# Compute the ROC AUC score\n","roc_auc = roc_auc_score(y_train, y_pred_prob)\n","print(\"ROC AUC Score:\", roc_auc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9_lJxBzE7LPX","executionInfo":{"status":"ok","timestamp":1713038578882,"user_tz":300,"elapsed":134,"user":{"displayName":"Tim Gruenloh","userId":"14090738425308861435"}},"outputId":"152bf8ff-6ce4-4e32-d1cb-c6c8c3238c00"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ROC AUC Score: 0.7939948720142169\n"]}]},{"cell_type":"code","source":["# Access coefficient summary information\n","coefficients = best_model_EN.coef_\n","intercept = best_model_EN.intercept_\n","col_names = new_df.columns\n","# Print the coefficients\n","print(\"Coefficients:\")\n","for i, coef in enumerate(coefficients):\n","    print(f\"Feature {col_names[i]}: {coef}\")\n","\n","# Print the intercept\n","print(\"Intercept:\", intercept)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IoW_FaS78pka","executionInfo":{"status":"ok","timestamp":1713037025781,"user_tz":300,"elapsed":109,"user":{"displayName":"Tim Gruenloh","userId":"14090738425308861435"}},"outputId":"517f4897-295a-4d70-9c34-2e3207247f72"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Coefficients:\n","Feature gene_distance: -5.203737213074537e-08\n","Feature gerp: -0.005309499472599852\n","Feature TAD: -0.008059709497305487\n","Feature eSTR: 0.09757944836567786\n","Feature opReg: 0.10123255681092293\n","Feature promoter: 0.008470992418469447\n","Feature UTR_3: 0.00746362333948054\n","Feature UTR_5: 0.17970851465004525\n","Feature loeuf: -0.0022370664567566327\n","Feature pLi: -0.005610545968755422\n","Feature RAD21: -0.0005991776531262726\n","Feature SMC3: -0.011648205186526105\n","Feature per_g: 0.0011486977170186167\n","Feature per_c: -0.0012585908743200183\n","Feature per_a: 0.002149269644704774\n","Feature per_t: -0.0008669630385718367\n","Feature gc_content: -0.00025508119889866907\n","Feature eSh0: 0.14970770066818995\n","Feature eSh1: -0.004316748445625885\n","Feature eSh2: -0.05094285988660473\n","Feature eSh3: 0.09373804380661135\n","Feature eSh4: 0.05977645945579682\n","Feature eSh5: -0.09430446999685144\n","Feature eTr0: -0.0008603081500927252\n","Feature eTr2: -0.004075247106627184\n","Feature eTr3: 0.09897936474303567\n","Feature eTr4: 0.006289822358438941\n","Feature eTr5: -0.09304915138006989\n","Feature eH: 5.1212336244294225e-05\n","Feature eW: 2.5640605980753813e-07\n","Feature eS6: 1.1591702989967516e-05\n","Feature eS: -5.0621463771371265e-08\n","Feature J: -0.16518738254997214\n","Feature eX0: -0.0038132313725597173\n","Feature eX1R: 0.0026608362684737734\n","Feature eX2: 0.003628119570167241\n","Feature eX3: -0.002808764442582296\n","Feature eX4: 0.002181038016562541\n","Feature eX5: -0.002946694567085318\n","Feature tissue_simple_No_expression: 0.03602316243487212\n","Feature tissue_simple_Nervous_System: -0.003077893229532949\n","Feature tissue_simple_Other: 0.0012579054590536036\n","Feature region_intergenic: 0.07164695496288136\n","Feature region_intron: -0.008278430159908298\n","Feature region_exon: 0.03638954948246993\n","Feature location_First: -0.0010036060364672617\n","Feature location_Middle: 0.0013513601287956443\n","Feature location_Last: 0.013627787953126042\n","Feature label: 0.07669587122888262\n","Feature gene_type_Unknown: 0.11684737287155988\n","Feature gene_type_antisense: 0.21847796634302008\n","Feature gene_type_lincRNA: -0.004061451751656084\n","Feature gene_type_polymorphic_pseudogene: 0.02291637275149594\n","Feature gene_type_processed_transcript: 0.113266804161566\n","Feature gene_type_protein_coding: 0.13436896994769332\n","Feature gene_type_pseudogene: 0.18012239975904556\n","Intercept: -0.5014098057717713\n"]}]},{"cell_type":"code","source":["param_grid = {\n","    'max_depth': [2, 5],\n","    'learning_rate': [0.2],\n","    'min_child_weight': [1],\n","    'subsample': [0.3, 0.5],\n","    'colsample_bytree': [0.3, 0.4]\n","}\n","xgb_classifier = xgb.XGBClassifier(verbosity=2, random_state=42)\n","\n","grid_search = GridSearchCV(verbose=2, estimator=xgb_classifier, param_grid=param_grid, cv=5, scoring='roc_auc')\n","grid_search.fit(X_train, y_train)\n","best_model_XGB = grid_search.best_estimator_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ShKPQ6uy0mdV","executionInfo":{"status":"ok","timestamp":1713039222146,"user_tz":300,"elapsed":26316,"user":{"displayName":"Tim Gruenloh","userId":"14090738425308861435"}},"outputId":"015a11bf-967b-4839-89e1-b7e019ac6cef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 8 candidates, totalling 40 fits\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   1.4s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   0.4s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   1.6s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   0.4s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   0.4s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.4s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.4s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.4s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.4s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.4s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   0.5s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   0.6s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   0.5s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   2.5s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   0.5s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.6s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.5s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.6s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.6s\n","[CV] END colsample_bytree=0.3, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.5s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   0.4s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   0.4s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   0.4s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   0.4s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.3; total time=   0.4s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.5s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.4s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.4s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.4s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=2, min_child_weight=1, subsample=0.5; total time=   0.4s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   0.6s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   0.6s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   0.6s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   0.6s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.3; total time=   2.1s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.9s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.5s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.6s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.6s\n","[CV] END colsample_bytree=0.4, learning_rate=0.2, max_depth=5, min_child_weight=1, subsample=0.5; total time=   0.6s\n"]}]},{"cell_type":"code","source":["# print params\n","best_params = grid_search.best_params_\n","print(\"Best Parameters:\", best_params)\n","y_pred_prob = best_model.predict(X_test)\n","\n","# Compute the ROC AUC score\n","roc_auc = roc_auc_score(y_test, y_pred_prob)\n","print(\"ROC AUC Score:\", roc_auc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1PgITYYs1te3","executionInfo":{"status":"ok","timestamp":1713039233596,"user_tz":300,"elapsed":220,"user":{"displayName":"Tim Gruenloh","userId":"14090738425308861435"}},"outputId":"218383ff-d6c6-49ca-8ea0-ea73315e84f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Parameters: {'colsample_bytree': 0.4, 'learning_rate': 0.2, 'max_depth': 5, 'min_child_weight': 1, 'subsample': 0.5}\n","ROC AUC Score: 0.7501426040879922\n"]}]},{"cell_type":"code","source":["y_pred_prob = best_model.predict(X_train)\n","\n","# Compute the ROC AUC score\n","roc_auc = roc_auc_score(y_train, y_pred_prob)\n","print(\"ROC AUC Score:\", roc_auc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"onneZvWo3ij8","executionInfo":{"status":"ok","timestamp":1713039238926,"user_tz":300,"elapsed":237,"user":{"displayName":"Tim Gruenloh","userId":"14090738425308861435"}},"outputId":"a4894433-b307-4c7a-ae30-d57dc4789638"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ROC AUC Score: 0.9216571459978918\n"]}]},{"cell_type":"code","source":["param_grid = {\n","    'n_estimators': [500, 1500],\n","}\n","rf_classifier = RandomForestClassifier(random_state=42)\n","\n","grid_search = GridSearchCV(verbose=2, estimator=rf_classifier, param_grid=param_grid, cv=5, scoring='roc_auc')\n","grid_search.fit(X_train, y_train)\n","best_model = grid_search.best_estimator_"],"metadata":{"id":"pjyLGJvL62ca"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print params\n","best_params = grid_search.best_params_\n","print(\"Best Parameters:\", best_params)\n","\n","y_pred_prob = best_model.predict(X_test)\n","\n","# Compute the ROC AUC score\n","roc_auc = roc_auc_score(y_test, y_pred_prob)\n","print(\"ROC AUC Score:\", roc_auc)"],"metadata":{"id":"B_JzUFR765K-"},"execution_count":null,"outputs":[]}]}